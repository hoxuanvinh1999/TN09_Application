@startuml

class client{
    id_client: string {key}
    account_name: string
    password: string
    client_firstname: string
    client_lastname: string
    date_of_birth: date
    date_of_creation: date
    address: string
    client_telephone: string
    email:  string

    create_client()
    delete_client()
    update_client()
    change_password()
}
class borne{
    id_borne: string {key}
    borne_qrcode: qr_code
    key_code: integer
    borne_address: string
    state_weight: float
    max_weight: float
    volume: float
    number_of_bac: integer
    list_bac: list_of_bac
    state: float
    full_state: boolean

    create_borne()
    delete_borne()
    update_borne()
    calculation_state()
    update_state()
    update_key_code()
    send_notification()
}

class table_of_borne{
    create_table_of_borne()
    update_table_of_borne()
    delete_table_of_borne()
}

class collector{ 
    id_collector: string {key}
    collector_firstname: string
    collector_lastname: string
    date_of_birth: date

    create_collector()
    update_collector()
    delete_collector()
}

class contact{
    id_contact: string{key}
    account_name: string
    password: string
    contact_name: string
    date_of_creation: date
    address: string
    contact_telephone: string
    email:  string
    money_to_pay: float

    create_contact()
    update_contact()
    delete_contact()
    change_password()

}
class site{
    id_site: string{key}
    type_restaurant: {restaurant, crous, cantine, autre}
    site_addres: string
    number_of_bac: integer
    list_bac: list_of_bac
    max_volume: float
    max_weight: float
    estimated_weight: float
    schedule: list_of {Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday}
    time_per_week: integer

    create_site()
    delete_site()
    update_site()
    update_site_list()
}

class contact_information{
    id_contact: string{key}
    id_site: string{key}

    update_contact_information()
}

class position{
    x: float
    y: float
    z: float

    get_positon()
    show_position()
}

class bac{
    id_bac: string {key}
    bac_volume: {120, 22, etc}
    bac_state: 0..5
    being_used: boolean

    create_bac()
    delete_bac()
    update_bac()
}

class receipt{
    price: integer
    checked: boolean
    note: string

    create_receipt()
    update_receipt()
    delete_receipt()
}


class step{
    id_step: string{key}
    id_vehicile: string
    id_borne: string
    id_site: string
    id_key_gate: string
    material: {biodechet, papier, verre, etc}
    estimated_time_come: hh:mm:ss
    real_time_come: hh:mm:ss
    day_come: date
    term: hh:mm
    number_of_bac: integer
    detaile_of_bac: table
    garbage_weight: float
    checked: boolean
    reason_not_collected: {closed, etc}
    signature: jpg
    step_point: 0..20
    next_step: id_step
    distance: float
    photo: jpg
    note: string

    create_step()
    update_step()
    calculation_step_distance()
    get_borne_weight()
    copy_step()
    update_and_copy_step()
}

class facture{
    id_facture: string{key}
    id_site: string
    price: float
    number_of_bac: integer
    garbage_weight: float
    day_created: date
    checked_payed: boolean
    day_payed: date

    create_facture()
    calculation_price()
    delete_facture()
    update_facture()
}

class planning{
    id_collector: string{key}
    start_day: date
    list_step: list_of_step
    start_time: hh:mm:ss 
    end_time: hh:m:ss
    end_day: date
    total_garbage_weight: float

    create_plan()
    update_plan()
    calculation_total_garbage_weight()
}

class day_information {
    day: date
    total_garbage: float
    note: string
}

class vehicle{
    id_vehicile: string{key}
    vehicle_type: {velo, camion}
    vehicle_max_weight: integer
    vehicle_state: 0..5
    note: string

    create_vehicle()
    update_vehicle()
    delete_vehicle()
}

class key_gate{
    id_key_gate: string {key}
    type: {cle, bagde, etc}
    note_key_gate()

    create_key_gate()
    update_key_gate()
    delete_key_gate()

}

client "1..*" -- "1" table_of_borne : show_best_option >
client "1" -- "1" position: show_client_position >  
client "1" -- "1" position: update_client_position >
client "1" -- "0..*" receipt: pay

borne "1" -- "1" position: placed_position >
borne "1" -- "1" position: show_borne_position >
borne "0..1" -- "1..*" bac
borne "1..*" -- "1..*" client: show_borne_map() <
borne "0..1" -- "1..*" step
borne "1..*" -- "1" table_of_borne

site "1" -- "1" position: show_site_position >
site "0..1" -- "1..*" bac
site "0..1" -- "1..*" step
site "1..*" --  contact_information
site "1" -- "1..*" facture

facture "1..*" -- "1" contact: send_facture <

contact_information -- "1" contact

receipt "1..*" -- "1" borne: pay_for   

step "0..1" -- "0..1" step: get_next_step()

planning "0..1" -- "1" vehicle
planning "1" -- "1..*" step
planning "1..*" -- "1" collector

day_information "1" -- "1..*" planning

key_gate "0..*" -- "1" site
key_gate "0..1" -- "1" step

@enduml